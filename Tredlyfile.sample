#############################
#### Tredlyfile version number
versionNumber=0.10.0
#############################

# You can use variables within this file which should be interpreted by your
# Code repository, e.g. gitlabs or Bamboo. You can also configure Tredly-Parse
# to interpret values or override values.

################################################################################
#### CONTAINER NAME AND CONTAINER GROUP

## Container Name [required]
# Unique per Partition
# Allowed values: text, integer, underscore (_) and dash (-)
# This should contain your AppName and version number. The hostname of this
# container will be equal to this value.
containerName=myContainer-v1

## Container Group [optional]
# Allowed values: text, integer, underscore (_) and dash (-)
# Only use this option if this container is part of a group of containers
containerGroup=MyContainerGroup

## Container Options within Container Group [optional]
# ** Note: required if containerGroup is specified
# Allowed values: a number from 1 (most important) to 99 (least important)
# Default: 1
# Order in which this container is started within your containerGroup
# Please note that if you update one container within your containerGroup, all
# containers will be rebuilt
startOrder=1

## Replicate Container [optional]
# When set to yes, this allows a container to be replicated within its
# containerGroup
# ** Note: required if containerGroup is specified
# Allowed values: yes, no
# Default: no
replicate=no


################################################################################
#### BUILD OPTIONS

## Publish container automatically [required]
# When set to yes, on push to Tredly-Host this container will be automatically
# validated and built. The updated container will replace the current container.
# To automatically build integration branch but manually build prod branch, you
# can use a variable.
# Allowed values: yes, no
# Default: yes
publish=no

################################################################################
#### TECHNICAL OPTIONS

## Container options [optional]
# This options will be set when the container is created. Supports multiple
# options; one per line.
# Allowed values: allow_sysvipc=1, allow_raw_sockets=true
# Default: none
# To allow ping/traceroute set allow_raw_sockets=true.
# PostgreSQL requires allow_sysvipc=1.
# Note: Both of these options may have security implications.
technicalOptions=

################################################################################
### RESOURCE LIMITS
## Limit resources used by this container.
# It is recommended that resource limits so that a misconfigured container, or
# buggy software, does not effect other containers on the same host.

## Container Maximum CPU [optional]
# Specify the total number of cores/percent this container can utilize
# Allowed values: integer + %
# Default: unlimited
maxCpu=

## Container Hard Disk Drive Size [optional]
# Specify the total amount of disk space, in Gigabytes (GB) this container
# will be allocated
# Allowed values: integer
# Default: unlimited
maxHdd=

## Container Maximum RAM [optional]
# Specify the total amount of RAM, in Gigabytes (GB) this container can utilize
# Allowed values: integer
# Default: unlimited
maxRam=

################################################################################
#### FIREWALL AND PROXY CONFIGURATION

## HTTP/HTTPS (layer7) Proxy Configuration [optional]
# Group of properties for URL(s) the container services and responds to.
# Each group has 5 different properties that can be set. Each property in the
# set must be proceeded by a number (see examples below):
#
# 1. url
#     This is a full URL, including any additional path, but excluding the
#     protocol. Any traffic that is received by the host for this particular URL
#     will be directed to this container. Only 1 URL can be specified per group
#     of properties.
#     e.g. url1=www.example.com/blah
#
# 2. urlRedirect [optional] [will be implemented for 0.10.0]
#     Redirect any requests to the main url specified for this group. Allows
#     multiple values; place each one a new line. You must include the protocol.
#     e.g. urlRedirect1=http://example.com
#          urlRedirect1=https://otherexample.com
#
# 3. urlRedirectCert [optional]
#     SSL certificate to apply to a http redirect "from" URL. Due to the HTTPS 
#     handshake occurring before the redirect message is sent to the browser,
#     you must specify a certificate for the redirect "from" URL. For example 
#     if you specify url1Redirect=https://www2.example.com then you must specify 
#     a certificate for this URL to use.
#     e.g. urlRedirectCert=star.example.com
#
# 4. urlCert [optional]
#     SSL configuration for URL - corresponds to a ssl definition file within
#     nginx/sslconfig. urlCert is folder name containing server.crt and
#     server.key for this URL. If URL has urlCert entered proxy will
#     automatically redirect HTTP traffic to HTTPS URL. If urlCert is not
#     specified connections to HTTPS will result in 404 error.
#     e.g. urlCert1=star.example.com
#
# 5. urlWebsocket [optional]
#     Enable Websockets for this URL. Additional headers will be set by the
#     layer7 proxy to allow Websocket connections to be persistent, and
#     connection upgrades of http:// to ws:// or https:// to wss:// will occur
#     automatically.
#     Allowed values: yes, no
#     Default: no
#     e.g. urlWebsocket1=yes
#
# 6. urlMaxFileSize [optional]
#     Set the maximum allowable upload size, in megabytes (m) or gigabytes (g)
#     for this URL.
#     Allowed values: value between 1m and 2g
#     Default: 1m
#     e.g. urlMaxFileSize1=10m
#
# ***** Below is a example of 2 different URLs *****

# URL 1
url1=www.example.com/blah
url1Cert=star.example.com
url1Redirect1=http://www2.example.com
url1Redirect1=
url1Redirect2=https://www3.example.com
url1Redirect2Cert=star.example.com
url1Websocket=
url1MaxFileSize=10m

# URL 2
url2=www2.example.com/blah2
url2Redirect=
url2Cert=
url2Websocket=
url2MaxFileSize=

# ***** End Example URL Section *****

## IPv4 Proxy (layer4) [optional]
# Layer4 proxy allows the container to use the Hosts external IP and forward
# traffic to your container on specific ports. Make sure the ports selected in
# tcpInPort and udpInPort options are available on the host.
# ** Note: Cannot be used on port 80/443 (HTTP/HTTPS) as internal Proxy handles
# this traffic. If layer4Proxy is set to yes, tcpInPort and udpInPort options
# will be forwarded directly to your container from the hosts external IP.
# Allowed values: yes, no
# Default: no
layer4Proxy=

## Firewall - Incoming & Outgoing Ports
# Required if you want this container to be able to communicate with other
# containers or the outside world.
# Allowed values: integer, any (all ports) or blank
# One port per line
# ** Note: tcpOutPort=80, tcpOutPort=443 and udpOutPort=53 are required values.
# ** Note: if your container services a URL make sure tcpInPort=80 or
# tcpInPort=443 is set so this containers firewall is open on this port and can
# receive traffic from the internal HTTP proxy.
tcpInPort=80
tcpInPort=443
udpInPort=
tcpOutPort=80
tcpOutPort=443
udpOutPort=53

## IPv4 Whitelist [optional]
# Restrict traffic to this container to an ip address or network range.
# Allowed values: valid IPv4 address and subnet
# ** Note: Use containerGroup To allow communications between containers
# in a partition
# Default: any
#ipv4Whitelist=1.2.3.4

################################################################################
#### CUSTOM DNS SERVERS [optional]
# Specify alternative DNS servers for this container to use. If left blank, or
# not specified, then the internal DNS server will be used (recommended).
# Allowed values: valid IP address or none
customDNS=

################################################################################
### Custom Commands and Operations
## Each command or operation in the section is run in order. All are
# optional and each must be placed on a new line. The available options are:
#
# 1. onStart
#       This command will be run when the container is started.
#       e.g. onStart= mkdir /usr/local/pgsql
#
# 2. onStop:
#       This command is run when the container is stopped, and before it
#       is destroyed. onStop commands should always be listed last.
#       e.g. onStop= service postgresql stop
#
# 3. installPackage
#       When this container is built, the package listed will be installed.
#       Any dependencies of the package specified will be installed.
#       e.g. installPackage=nginx
#
# 4. fileFolderMapping
#       Consists of two parts: the source and destination.
#       Source is relative to the container root (/) or
#       partition root (partition/) on the host. Destination
#       is the absolute path within the container where the file
#       or folder will be copied. Folders will be created in
#       the container first if they do not exist
#       e.g. fileFolderMapping= postgresql.conf /usr/local/pgsql/data/
#            fileFolderMapping=partition/mySSLCerts /usr/local/etc/nginx/ssl
#
# ***** Below is a example of a typical Nginx and PostgreSQL install *****

onStart= mkdir /usr/local/etc/example/sslFolder

fileFolderMapping=partition/mySSLCerts/star.example.com /usr/local/etc/sslFolder
onStart= mkdir /usr/local/pgsql
onStart= mkdir /usr/local/pgsql/data
onStart= mkdir /usr/local/pgsql/data/ssl

installPackage=nginx
installPackage=postgreSQL

fileFolderMapping= postgresql.conf /usr/local/pgsql/data/
fileFolderMapping= pg_hba.conf /usr/local/pgsql/data/
fileFolderMapping= recovery.done /usr/local/pgsql/data/
fileFolderMapping= server.key /usr/local/pgsql/data/ssl/
fileFolderMapping= server.cert /usr/local/pgsql/data/ssl/
fileFolderMapping= root.crt /usr/local/pgsql/data/ssl/

onStart= sysrc postgresql_enable=yes
onStart=/ usr/local/etc/rc.d/postgresql initdb

installPackage=unbound

# PostgreSQL requires the server key to be installed before starting
onStart= chmod 0600 /usr/local/pgsql/data/ssl/server.key
onStart= service postgresql start

# Commands run when container stops or is terminated (one per line, optional)
onStop= service postgresql stop
onStop= exampleCommand2

# ***** End Example Section *****
